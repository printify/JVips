name: Build and Release
on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - master

jobs:
  build_for_linux_x64:
    runs-on: ubuntu-latest
    name: Build for Linux
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache Docker layers
        uses: satackey/action-docker-layer-caching@v0.0.8
        with:
          key: docker-layers-linux-amd64-{hash}
          restore-keys: |
            docker-layers-linux-amd64-
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true

      - name: Build Docker builder image
        run: docker build --build-arg UID=$(id -u) --build-arg GID=$(id -g) -f .github/docker/linux/Dockerfile -t builder .

      - name: Build
        run: docker run --rm -e CI -e JAVA_HOME=/usr/lib/jvm/java-openjdk -v $(pwd):/app -w /app builder

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: jvips-libs-linux
          path: JVips-libs.tar.gz
#  build_for_linux_aarch64:
#    runs-on: ubuntu-latest
#    name: Build for Linux aarch64
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      - name: Cache Docker layers
#        uses: satackey/action-docker-layer-caching@v0.0.8
#        with:
#          key: docker-layers-linux-aarch64-{hash}
#          restore-keys: |
#            docker-layers-linux-aarch64-
#        # Ignore the failure of a step and avoid terminating the job.
#        continue-on-error: true
#
#      - name: Build Docker builder image
#        run: docker build --platform linux/arm64 --build-arg ARCH=aarch64 --build-arg UID=$(id -u) --build-arg GID=$(id -g) -f .github/docker/linux/Dockerfile -t builder .
#
#      - name: Build
#        run: docker run --rm -e CI -e ARCH=aarch64 -v $(pwd):/app -w /app builder
#
#      - name: Upload artifact
#        uses: actions/upload-artifact@v2
#        with:
#          name: jvips-libs-linux-aarch64
#          path: JVips-libs.tar.gz

  build_for_windows_x64:
    runs-on: ubuntu-latest
    name: Build for Windows
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Build Docker builder image
        run: docker build --build-arg UID=$(id -u) --build-arg GID=$(id -g) -f .github/docker/windows/Dockerfile -t builder .

      - name: Build
        run: docker run --rm -e CI -v $(pwd):/app -w /app builder

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: jvips-libs-windows
          path: JVips-libs.tar.gz

  build_for_macos_x64:
    runs-on: macos-latest
    if: github.event_name != 'pull_request' # To speed up the feedback
    name: Build for macOS
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Select Java
        uses: actions/setup-java@v1
        with:
          java-version: "1.8.0"
          java-package: jdk
          architecture: x64

      - name: Install vips
        run: ./setup-for-macos.sh

      - name: Build
        run: ./build.sh --with-macos --without-w64 --without-linux

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: jvips-libs-macos
          path: JVips-libs.tar.gz

  release:
    needs: [build_for_linux_x64, build_for_macos_x64, build_for_windows_x64]
    if: contains('refs/heads/master', github.ref)
    runs-on: ubuntu-latest
    name: Merge macOS, Linux, Windows artifacts into a JAR and release it
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Extract libraries
        run: for jar in artifacts/*/JVips-libs.tar.gz; do tar xvf $jar; done

      - name: Set version
        id: version
        run: |
          source lib/VERSIONS
          VERSION="${VIPS_VERSION}-$(git rev-parse --short HEAD)"
          mvn -B versions:set -DnewVersion=$VERSION
          echo "::set-output name=version::$VERSION"

      - name: Publish to the Maven Central Repository
        run: mvn -B -DskipTests -P minimal build

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: jvips
          path: JVips.jar

      - name: Create release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: ${{ steps.version.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: JVips.jar
          asset_name: JVips.jar
          asset_content_type: application/java-archive